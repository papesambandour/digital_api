import { HttpService } from '@nestjs/common';
import { OperationEnumPhone, StatusEnum, TypeEvenEnum, TypeOperationEnum } from './Models/Entities/Enum.entity';
import { Connection } from 'typeorm';
import { Phones } from './Models/Entities/Phones.entity';
import { Transactions } from './Models/Entities/Transactions.entity';
import { ApiManagerInterface } from './Controllers/api-service/api-manager-interface/api-manager-interface.service';
import { SousServices } from './Models/Entities/SousServices.entity';
import { ApiServiceService } from './Controllers/api-service/api-service.service';
import { OperationInDto } from './Controllers/api-service/dto/OperationInDto';
import { ErrorTypes } from './Models/Entities/ErrorTypes.entity';
export declare type Rib = {
    bankCode: RibItem;
    ribKey: RibItem;
    accountNumber: RibItem;
    branchCode: RibItem;
    rib: RibItem;
};
export declare type RibItem = {
    value: string | undefined | null;
    isValid: boolean;
};
export declare class HelperService {
    private readonly connection;
    private httpService;
    constructor(connection: Connection, httpService: HttpService);
    notifyAdmin(message: string, typeEvent: TypeEvenEnum, data?: {}): Promise<void>;
    setSoldeTableOnly(value: number, tableName: string, id: number, field: string): Promise<any>;
    setSoldeTableFromValue(value: number, tableName: string, id: number, field: string): Promise<any>;
    incrementSolde(value: number, tableName: string, id: number, field: string): Promise<any>;
    operationPhone(phone: Phones, soldeApi: number, amount: number, transactionId: number, typeOperation: TypeOperationEnum, comment: string, operationId?: number | null, operation?: OperationEnumPhone): Promise<void>;
    waitSome(seconde: number): Promise<unknown>;
    mysqlDate(d: Date): string;
    getApiManagerInterface(codeService: string, apiService: ApiServiceService): Promise<ApiManagerInterface>;
    getTransactionById(transactionId: number, extraRelation?: any[]): Promise<Transactions>;
    getTransactionByGeneratedId(transactionId: string, extraRelation?: any[]): Promise<Transactions>;
    setIsCallbackReadyValue(transactionId: any): Promise<void>;
    setTimeOutDate(transactionId: any): Promise<void>;
    sendCallBack(transaction: Transactions): Promise<any>;
    private addMinuteToDate;
    setSoldeTableForDebitOnly(sousServices: SousServices, value: number, tableName: string, id: number, field?: string): Promise<any>;
    operationPartnerDoTransaction(transaction: Transactions): Promise<void>;
    operationPartnerCancelTransaction(transaction: Transactions): Promise<boolean>;
    updateApiBalance(apiManager: ApiManagerInterface, usedPhoneId: number): Promise<void>;
    base64(str: any): Promise<string>;
    sendSms(tos: string[], message: string, sender: string): Promise<void>;
    getStatusAfterExec(execResult: 'success' | 'timeout' | 'failed', service: SousServices): {
        preStatus: any;
        status: any;
    };
    checkServiceConfig(): Promise<void>;
    private disableSousService;
    handleSuccessTransactionCreditDebit(transaction: Transactions, sousServiceTransactionId?: any): Promise<boolean>;
    isNotCancelable(preStatus: StatusEnum | any | string, status: StatusEnum | any | string): boolean;
    appendQueryParams(url: string, queryParams?: any): string;
    private getTransactionCallBackHash;
    private sha256;
    b64ToFilePath(attachedMedia: string, attachedMediaExtension: string, attachedMediaName: string): Promise<string>;
    getAmountForMessenger(operationInDto: OperationInDto): Promise<number>;
    provideErrorType(transactionId: number | undefined, providedErrorMessage?: string | undefined, providedError?: ErrorTypes | undefined): Promise<any>;
    getErrorType(errorMessage: string, codeSousService: string, amount: string): Promise<any>;
    alertForUnknownResponse(responseData: string, codeService: string, transactionId: number): void;
    ribFromString(rib: string, country?: 'sn' | 'ci'): Rib;
    getDeepLinkNotificationMessage(transaction: Transactions, deepLink: string): string;
}

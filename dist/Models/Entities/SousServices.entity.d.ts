import { BaseEntity } from 'typeorm';
import { Commission } from './Commission.entity';
import { MessageUssds } from './MessageUssds.entity';
import { SousServicesParteners } from './SousServicesParteners.entity';
import { SousServicesPhones } from './SousServicesPhones.entity';
import { Services } from './Services.entity';
import { TypeServices } from './TypeServices.entity';
import { Transactions } from './Transactions.entity';
import { EXECUTE_TYPE_USSD, TypeOperationEnum } from './Enum.entity';
import { ErrorTypes } from './ErrorTypes.entity';
export declare class SousServices extends BaseEntity {
    id: number;
    needPhone: number;
    hasSoldeApi: number;
    name: string;
    ussdCode: string;
    regexMessageValidation: string;
    messageRetourUssd: string;
    positionValidationIndex: string;
    validLength: number;
    icon: string;
    regexPhone: string;
    code: string;
    state: 'ACTIVED' | 'INACTIVED' | 'DELETED';
    createdAt: Date;
    updatedAt: Date | null;
    minLimitTransaction: number;
    maxLimitTransaction: number;
    maxLimitDay: number;
    maxLimitWeek: number;
    maxLimitMonth: number;
    maxLimitTrimest: number;
    typeOperation: TypeOperationEnum;
    servicesId: number;
    typeServicesId: number;
    apiManagerClassName: string;
    apiManagerNamespace: string;
    amountCommission: number;
    tauxCommission: number;
    tauxFee: number;
    amountFee: number;
    pendingTimeout: number;
    preStatusErrorType: 'PENDING_ON_ERROR' | 'FAILED_ON_ERROR' | 'PROCESSING_ON_ERROR' | 'SUCCESS_ON_ERROR';
    statusErrorType: 'PROCESSING_ON_ERROR' | 'SUCCESS_ON_ERROR' | 'PENDING_ON_ERROR' | 'FAILED_ON_ERROR';
    preStatusSuccessType: 'PENDING_ON_SUCCESS' | 'SUCCESS_ON_SUCCESS' | 'PROCESSING_ON_SUCCESS';
    statusSuccessType: 'PENDING_ON_SUCCESS' | 'SUCCESS_ON_SUCCESS' | 'PROCESSING_ON_SUCCESS';
    preStatusTimeOutType: 'PENDING_ON_TIMEOUT' | 'SUCCESS_ON_TIMEOUT' | 'PROCESSING_ON_TIMEOUT' | 'FAILED_ON_TIMEOUT';
    statusTimeOutType: 'PENDING_ON_TIMEOUT' | 'SUCCESS_ON_TIMEOUT' | 'PROCESSING_ON_TIMEOUT' | 'FAILED_ON_TIMEOUT';
    whenPreStatusForCallback: string;
    whenStatusForCallback: string;
    executeType: EXECUTE_TYPE_USSD;
    executeCountryCallCodeWithoutPlus: string;
    executeSmsSender: string;
    senderSmsAuthorize: string;
    commissions: Commission[];
    messageUssds: MessageUssds[];
    sousServicesParteners: SousServicesParteners[];
    sousServicesPhones: SousServicesPhones[];
    services: Services;
    typeServices: TypeServices;
    transactions: Transactions[];
    errorTypes: ErrorTypes[];
}

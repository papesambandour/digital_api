import { HttpService } from '@nestjs/common';
import { OperationInDto } from './dto/OperationInDto';
import { PartenerComptes } from '../../Models/Entities/PartenerComptes.entity';
import { Connection } from 'typeorm';
import { SousServices } from '../../Models/Entities/SousServices.entity';
import { SousServicesParteners } from '../../Models/Entities/SousServicesParteners.entity';
import { Parteners } from '../../Models/Entities/Parteners.entity';
import { Commission } from '../../Models/Entities/Commission.entity';
import { Operators } from '../../Models/Entities/Operators.entity';
import { Services } from '../../Models/Entities/Services.entity';
import { Phones } from '../../Models/Entities/Phones.entity';
import { HelperService } from '../../helper.service';
import { CheckResponse, InitResponse, RefundResponse } from './api-manager-interface/api-manager-interface.service';
export declare class ApiServiceService {
    readonly connection: Connection;
    helper: HelperService;
    httpService: HttpService;
    comptePartner: PartenerComptes;
    partner: Parteners;
    sousServices: SousServices;
    sousServicesPartner: SousServicesParteners;
    comission: Commission;
    feeAmount: number;
    commissionAmount: number;
    feeAmountPsp: number;
    commissionAmountPsp: number;
    operationInDto: OperationInDto;
    operator: Operators;
    service: Services;
    transactionId: number;
    phone: Phones;
    isSoldeComm: boolean;
    constructor(connection: Connection, helper: HelperService, httpService: HttpService);
    setSoldeTable(value: number, tableName: string, id: number, field?: string): Promise<any>;
    initFeeCommission(commission: any, amount: number): void;
    validatorCustomApi(operationInDto: OperationInDto): Promise<false | {
        apiKey: any[];
        codeService: any[];
        errorRedirectUrl: any[];
        successRedirectUrl: any[];
        customerFirstName: any[];
        customerLastName: any[];
        merchantName: any[];
        customerEmail: any[];
        cardNumber: any[];
        cardExpireMonth: any[];
        cardExpireYear: any[];
        cardCVC: any[];
        cardType: any[];
        amount: any[];
        callbackUrl: any[];
        phone: any[];
    }>;
    validUrl(str: any): boolean;
    generateTransactionId(): string;
    allDataIsOk(): any;
    responseOperation(response: CheckResponse | RefundResponse | InitResponse, operationInDto: OperationInDto, errorType: any): any;
    getPartner(headers: any): Promise<PartenerComptes>;
    private initFeePartner;
}

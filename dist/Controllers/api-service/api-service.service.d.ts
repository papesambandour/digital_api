import { OperationInDto } from './dto/OperationInDto';
import { PartenerComptes } from '../../Models/Entities/PartenerComptes.entity';
import { Connection } from 'typeorm';
import { SousServices } from '../../Models/Entities/SousServices.entity';
import { SousServicesParteners } from '../../Models/Entities/SousServicesParteners.entity';
import { Parteners } from '../../Models/Entities/Parteners.entity';
import { Commission } from '../../Models/Entities/Commission.entity';
import { DtoTransactions } from '../../Models/Dto/DtoTransactions';
import { Transactions } from '../../Models/Entities/Transactions.entity';
import { Operators } from '../../Models/Entities/Operators.entity';
import { Services } from '../../Models/Entities/Services.entity';
import { Phones } from '../../Models/Entities/Phones.entity';
import { SocketBodyFinish } from '../../Models/MobileSocket/SocketModel';
import { HelperService } from '../../helper.service';
export declare class ApiServiceService {
    private readonly connection;
    private helper;
    constructor(connection: Connection, helper: HelperService);
    setSoldeTable(value: number, tableName: string, id: number, field?: string): Promise<any>;
    comptePartner: PartenerComptes;
    partner: Parteners;
    sousServices: SousServices;
    sousServicesPartner: SousServicesParteners;
    comission: Commission;
    feeAmount: number;
    commissionAmount: number;
    operationInDto: OperationInDto;
    operator: Operators;
    service: Services;
    transactionId: number;
    initFeeCommission(commission: any, amount: number): void;
    validatorCustomApi(operationInDto: OperationInDto): Promise<false | {
        apiKey: any[];
        codeService: any[];
        amount: any[];
        callbackUrl: any[];
        phone: any[];
    }>;
    validUrl(str: any): boolean;
    initTransaction(phone: Phones): Promise<Transactions>;
    generateTransactionId(): string;
    allDataIsOk(): any;
    loadBalancingPhone(): Promise<Phones>;
    waitSome(seconde: number): Promise<unknown>;
    phone: Phones;
    activePhone(phoneId: number): Promise<void>;
    disablePhone(phoneId: number): Promise<void>;
    mysqlDate(d: Date): string;
    finishExecUssd(socketBodyFinish: SocketBodyFinish): Promise<boolean>;
    callCall(phone: Phones, transaction: Transactions): Promise<unknown>;
    getUssDCode(regexCodeUss: string, phone: Phones): string;
    responseOperation(transaction: DtoTransactions): {
        phone: string;
        amount: number;
        codeService: string;
        transactionId: string;
        status: "SUCCESS" | "PENDING" | "PROCESSING" | "FAILLED" | "CANCELED";
        externalTransactionId: string;
        callbackUrl: string;
    };
    operationPartnerDoTransaction(transaction: Transactions): Promise<void>;
    operationPartnerCancelTransaction(transaction: Transactions): Promise<void>;
    getPartner(headers: any): Promise<PartenerComptes>;
}
